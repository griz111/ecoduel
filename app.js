const tg = window.Telegram.WebApp;
let currentBet = 0;
let userBalance = 100;

tg.ready();
tg.expand();

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
const loadProfile = async () => {
    try {
        const response = await fetch(`/api/profile?initData=${encodeURIComponent(tg.initData)}`);
        const data = await response.json();
        userBalance = data.balance;
        document.getElementById('balance').textContent = `–ë–∞–ª–∞–Ω—Å: ${userBalance} ECO`;
    } catch (error) {
        tg.showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞–≤–æ–∫
document.querySelectorAll('.bet-btn').forEach(btn => {
    btn.addEventListener('click', () => {
        currentBet = parseInt(btn.dataset.bet);
        document.querySelectorAll('.bet-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        tg.HapticFeedback.impactOccurred('light');
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
document.querySelectorAll('.element-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
        if (!currentBet) return tg.showAlert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É!');
        if (currentBet > userBalance) return tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');

        try {
            const response = await fetch('/api/duel', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    initData: tg.initData,
                    bet: currentBet,
                    element: btn.dataset.element
                })
            });
            
            const data = await response.json();
            
            if (data.status === 'waiting') {
                document.getElementById('status').textContent = '‚öîÔ∏è –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...';
                pollDuelStatus(data.duelId);
            } else {
                updateGameResult(data);
            }
        } catch (error) {
            tg.showAlert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
    });
});

// –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥—É—ç–ª–∏
const pollDuelStatus = async (duelId) => {
    const interval = setInterval(async () => {
        try {
            const response = await fetch(`/api/duel/${duelId}`);
            const data = await response.json();
            
            if (data.status === 'completed') {
                clearInterval(interval);
                updateGameResult(data);
            }
        } catch (error) {
            clearInterval(interval);
            tg.showAlert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
    }, 2000);
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const updateGameResult = (data) => {
    userBalance = data.newBalance;
    document.getElementById('balance').textContent = `–ë–∞–ª–∞–Ω—Å: ${userBalance} ECO`;
    
    let message = `üåø ${data.element1} vs ${data.element2} üî•\n`;
    message += data.winner === 'draw' 
        ? "ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã" 
        : `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${data.winner}\nüí∞ –í—ã–∏–≥—Ä—ã—à: ${data.prize} ECO`;

    document.getElementById('status').textContent = message;
    tg.showAlert(message);
    
    if (data.winner !== 'draw') {
        const winnerElement = data[`element${data.winner === 'player1' ? 1 : 2}`];
        document.querySelector(`[data-element="${winnerElement}"]`).classList.add('winner-animation');
        setTimeout(() => {
            document.querySelector(`[data-element="${winnerElement}"]`).classList.remove('winner-animation');
        }, 2000);
    }
};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º
document.getElementById('set-wallet').addEventListener('click', async () => {
    const wallet = document.getElementById('wallet-input').value.trim();
    
    if (!/^EQ[0-9a-zA-Z]{48}$/.test(wallet)) {
        return tg.showAlert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TON –∫–æ—à–µ–ª—å–∫–∞');
    }

    try {
        await fetch('/api/wallet', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                initData: tg.initData,
                wallet
            })
        });
        tg.showAlert('‚úÖ –ö–æ—à–µ–ª–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } catch (error) {
        tg.showAlert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
});

// –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
document.getElementById('withdraw-btn').addEventListener('click', async () => {
    try {
        const response = await fetch('/api/withdraw', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                initData: tg.initData,
                amount: 1
            })
        });
        
        const result = await response.json();
        if (result.success) {
            tg.showAlert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ 1 TON!\nTX Hash: ${result.hash}`);
        } else {
            tg.showAlert(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
    } catch (error) {
        tg.showAlert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadProfile();